include ../../templates/dev.pug

+var_dev([{"id":0,"title":"基本","list":[{"path":"ruby/main","title":"main関数的なやつ"},{"path":"ruby/print","title":"標準出力"},{"path":"ruby/command_line_args","title":"コマンドライン引数"}]},{"id":1,"title":"入出力","list":[{"path":"ruby/console_key_input","title":"コンソールでキー入力を得る"}]},{"id":2,"title":"文字列","list":[{"path":"ruby/regexp","title":"正規表現"}]},{"id":3,"title":"配列","list":[{"path":"ruby/swap","title":"入れ替え"}]},{"id":4,"title":"関数","list":[{"path":"ruby/function_object","title":"関数オブジェクト"},{"path":"ruby/type_check","title":"型判定"}]}], "ruby/print", "Ruby")

+devart("ruby", "print", "標準出力", "Ruby")
    p.lead デバッグにはp, 普通に出力するときはprint, putsをよく使う
    +code("ruby").
        # print 改行なし
        print "foo"
    
        # puts 改行あり
        puts "foo"
    
        # p オブジェクトを文字列にして出力
        p [1, 2, "3"]       # => [1, 2, "3"]
    
        # pp p に改行をつけてさらに分かりやすくして出力
        require "pp"
        pp Array.new(10) { [1, 2, "3"] }
    
        # y yaml形式で出力
        require "yaml"
        y [1, 2, "3"]
    
    p.lead 特殊文字などの出力
    +code("ruby"): :esc
        # エスケープ
        print "foo\n"
    
        # シングルクォーテーションではエスケープされない
        print 'foo\n'       # => foo\n
    
        # 変数を出力
        bar = 10
        print "foo#{bar}"   # => foo10
    
        # シングルクォーテーションではそのまま出力
        print 'foo#{bar}'   # => foo#{bar}
    
    
