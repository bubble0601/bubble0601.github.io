p main関数を短くすると処理の流れが分かりやすくておすすめです
p.mt-2 関数の引数の宣言で
    code int[][SIZE_X];
    | のように2次元配列の行を省略し列のみ指定しているのは、アドレスを計算するときに列数のみ分かれば十分だからです
p 例えば
    code mat[1]
    | のアドレスは
    code mat
    | のアドレスに
    code SIZE_X*sizeof(int)
    | 足せば分かります
+code("c"): :esc
    #include <stdio.h>
    #include <stdlib.h>
    #include <unistd.h>
    #include <time.h>

    #define SIZE_X 150  // 横
    #define SIZE_Y 35   // 縦

    void init(int[][SIZE_X]);
    void update(int[][SIZE_X]);
    int is_living(int[][SIZE_X]);
    void print_mat(int[][SIZE_X]);

    int main() {
        int mat[SIZE_Y][SIZE_X];
        init(mat);

        while(is_living(mat)) {
            print_mat(mat);
            update(mat);
            usleep(50000);  // 0.05秒ごとに更新
        }
    }

    // 初期化
    void init(int mat[][SIZE_X]) {
        // 初期は各マス20%で生
        srand(time(NULL));
        for (int i = 0; i < SIZE_Y; i++) {
            for (int j = 0; j < SIZE_X; j++) {
                if (rand() % 5 == 0) {
                    mat[i][j] = 1;  // 生
                } else {
                    mat[i][j] = 0;  // 死
                }
            }
        }
    }

    // 更新
    void update(int mat[][SIZE_X]) {
        int count[SIZE_Y][SIZE_X];
        for (int i = 0; i < SIZE_Y; i++) {
            for (int j = 0; j < SIZE_X; j++) {
                count[i][j] = 0;
                if (i > 0) count[i][j] += mat[i-1][j];
                if (j > 0) count[i][j] += mat[i][j-1];
                if (i > 0 && j > 0) count[i][j] += mat[i-1][j-1];
                if (i < SIZE_Y-1) count[i][j] += mat[i+1][j];
                if (j < SIZE_X-1) count[i][j] += mat[i][j+1];
                if (i < SIZE_Y-1 && j < SIZE_X-1) count[i][j] += mat[i+1][j+1];
                if (i > 0 && j < SIZE_X-1) count[i][j] += mat[i-1][j+1];
                if (j > 0 && i < SIZE_Y-1) count[i][j] += mat[i+1][j-1];
            }
        }

        for (int i = 0; i < SIZE_Y; i++) {
            for (int j = 0; j < SIZE_X; j++) {
                if (mat[i][j] == 0) {
                    if (count[i][j] == 3) mat[i][j] = 1;
                } else {
                    if (count[i][j] <= 1 || count [i][j] >= 4) mat[i][j] = 0;
                }
            }
        }
    }

    // 生きている個体があるか判定
    int is_living(int mat[][SIZE_X]) {
        for (int i = 0; i < SIZE_Y; i++) {
            for (int j = 0; j < SIZE_X; j++) {
                if (mat[i][j] == 1) return 1;
            }
        }
        return 0;
    }

    // 表示
    void print_mat(int mat[][SIZE_X]) {
        system("clear");

        for (int i = 0; i < SIZE_Y; i++) {
            for (int j = 0; j < SIZE_X; j++) {
                if (mat[i][j] == 0) {
                    printf(".");
                } else {
                    printf("#");
                }
            }
            printf("\n");
        }
    }
